// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here: 
    //instruction decode
    And16(a = instruction,b[0..15] = true,
        out = out1,
        out[0] = jgt, out[1] = jeq, out[2] = jlt,
        out[3] = Mload, out[4] = Dload, out[5] = Aload,
        out[6] = c6, out[7] = c5, out[8] = c4, out[9] = c3, out[10] = c2, out[11] = c1,
        out[12] = AM,
        out[15] = AC
        );
    //Control sig
    Not(in = AC,out = ACn); 
    And(a = AC,b = Dload,out = ACDload);
    And(a = AC,b = Mload,out = ACMload,out = writeM); 
    Or(a = ACn,b = Aload,out = AWrite);

    // logic of A and D register
    Mux16(a = preoutM,b = instruction,sel = ACn,out = inoutmsel); 
    ARegister(in = inoutmsel,out = aout,out[0..14]=addressM,load = AWrite);
    Mux16(a = aout,b = inM,sel= AM,out = amout);
    DRegister(in = preoutM,out = dout,load = ACDload);


    ALU(x = dout,y = amout,zx = c1,nx=c2,
        zy = c3,ny =c4, f = c5,no =c6,
	out = preoutM,out = outM,
	zr = zrf,ng = ngf
        );
    PC(in = aout,reset = reset ,load = pcload,inc = true,out[0..14] = pc);

    // JMP control sig
    And(a = jgt,b = jeq,out = jgtjeq);
    And(a = jeq,b = jlt,out = jeqle);
    And(a = jlt,b = ngf,out = jltngf,out=le);
    And(a = jeq,b = zrf,out = eq);
    And(a = ngf,b = zrf,out = ngzr);
    Not(in = ngf,out = ngfn);
    Not(in = zrf,out = zrfn);

    And(a = jgt,b = jlt,out = jgtjlt);
    And(a = jgtjlt,b = zrfn,out = jne); 

    Or(a = ngf,b = zrf,out = ngfAzrf);
    And(a = ngfAzrf,b = jeqle,out = leeq);

    Or(a = ngfn,b = zrf,out = ngfnAzrf);
    And(a = ngfnAzrf,b = jgtjeq,out = gteq);

    And(a = ngfn,b = zrfn,out = ngfnzrfn);
    And(a = ngfnzrfn,b = jgt,out = gt);

    And(a = jgtjeq,b = jlt,out = jmp); 
    Or8Way(in[0] = jmp,
           in[1] =le,
	   in[2] =leeq,
	   in[3] =gt,
	   in[4] =jne,
	   in[5] =eq,
	   in[6] =gteq,
	   in[7] =false,
	   out=jmp1);
    And(a = AC,b = jmp1,out = pcload); 
    }
